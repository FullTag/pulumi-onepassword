# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OnepasswordItemArgs', 'OnepasswordItem']

@pulumi.input_type
class OnepasswordItemArgs:
    def __init__(__self__, *,
                 vault: pulumi.Input[str],
                 category: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_recipe: Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OnepasswordItem resource.
        :param pulumi.Input[str] vault: The UUID of the vault the item is in.
        :param pulumi.Input[str] category: The category of the item. One of ["login" "password" "database"]
        :param pulumi.Input[str] database: (Only applies to the database category) The name of the database.
        :param pulumi.Input[str] hostname: (Only applies to the database category) The address where the database can be found
        :param pulumi.Input[str] password: Password for this item.
        :param pulumi.Input['OnepasswordItemPasswordRecipeArgs'] password_recipe: Password for this item.
        :param pulumi.Input[str] port: (Only applies to the database category) The port the database is listening on.
        :param pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]] sections: A list of custom sections in an item
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An array of strings of the tags assigned to the item.
        :param pulumi.Input[str] title: The title of the item.
        :param pulumi.Input[str] type: The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param pulumi.Input[str] url: The primary URL for the item.
        :param pulumi.Input[str] username: Username for this item.
        """
        OnepasswordItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            vault=vault,
            category=category,
            database=database,
            hostname=hostname,
            password=password,
            password_recipe=password_recipe,
            port=port,
            sections=sections,
            tags=tags,
            title=title,
            type=type,
            url=url,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             vault: pulumi.Input[str],
             category: Optional[pulumi.Input[str]] = None,
             database: Optional[pulumi.Input[str]] = None,
             hostname: Optional[pulumi.Input[str]] = None,
             password: Optional[pulumi.Input[str]] = None,
             password_recipe: Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']] = None,
             port: Optional[pulumi.Input[str]] = None,
             sections: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             title: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("vault", vault)
        if category is not None:
            _setter("category", category)
        if database is not None:
            _setter("database", database)
        if hostname is not None:
            _setter("hostname", hostname)
        if password is not None:
            _setter("password", password)
        if password_recipe is not None:
            _setter("password_recipe", password_recipe)
        if port is not None:
            _setter("port", port)
        if sections is not None:
            _setter("sections", sections)
        if tags is not None:
            _setter("tags", tags)
        if title is not None:
            _setter("title", title)
        if type is not None:
            _setter("type", type)
        if url is not None:
            _setter("url", url)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter
    def vault(self) -> pulumi.Input[str]:
        """
        The UUID of the vault the item is in.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: pulumi.Input[str]):
        pulumi.set(self, "vault", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        The category of the item. One of ["login" "password" "database"]
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        (Only applies to the database category) The name of the database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        (Only applies to the database category) The address where the database can be found
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordRecipe")
    def password_recipe(self) -> Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password_recipe")

    @password_recipe.setter
    def password_recipe(self, value: Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']]):
        pulumi.set(self, "password_recipe", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        (Only applies to the database category) The port the database is listening on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]]:
        """
        A list of custom sections in an item
        """
        return pulumi.get(self, "sections")

    @sections.setter
    def sections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]]):
        pulumi.set(self, "sections", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of strings of the tags assigned to the item.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the item.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The primary URL for the item.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for this item.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _OnepasswordItemState:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_recipe: Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 uuid: Optional[pulumi.Input[str]] = None,
                 vault: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OnepasswordItem resources.
        :param pulumi.Input[str] category: The category of the item. One of ["login" "password" "database"]
        :param pulumi.Input[str] database: (Only applies to the database category) The name of the database.
        :param pulumi.Input[str] hostname: (Only applies to the database category) The address where the database can be found
        :param pulumi.Input[str] password: Password for this item.
        :param pulumi.Input['OnepasswordItemPasswordRecipeArgs'] password_recipe: Password for this item.
        :param pulumi.Input[str] port: (Only applies to the database category) The port the database is listening on.
        :param pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]] sections: A list of custom sections in an item
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An array of strings of the tags assigned to the item.
        :param pulumi.Input[str] title: The title of the item.
        :param pulumi.Input[str] type: The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param pulumi.Input[str] url: The primary URL for the item.
        :param pulumi.Input[str] username: Username for this item.
        :param pulumi.Input[str] uuid: The UUID of the item. Item identifiers are unique within a specific vault.
        :param pulumi.Input[str] vault: The UUID of the vault the item is in.
        """
        _OnepasswordItemState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            database=database,
            hostname=hostname,
            password=password,
            password_recipe=password_recipe,
            port=port,
            sections=sections,
            tags=tags,
            title=title,
            type=type,
            url=url,
            username=username,
            uuid=uuid,
            vault=vault,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[str]] = None,
             database: Optional[pulumi.Input[str]] = None,
             hostname: Optional[pulumi.Input[str]] = None,
             password: Optional[pulumi.Input[str]] = None,
             password_recipe: Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']] = None,
             port: Optional[pulumi.Input[str]] = None,
             sections: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             title: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             username: Optional[pulumi.Input[str]] = None,
             uuid: Optional[pulumi.Input[str]] = None,
             vault: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if database is not None:
            _setter("database", database)
        if hostname is not None:
            _setter("hostname", hostname)
        if password is not None:
            _setter("password", password)
        if password_recipe is not None:
            _setter("password_recipe", password_recipe)
        if port is not None:
            _setter("port", port)
        if sections is not None:
            _setter("sections", sections)
        if tags is not None:
            _setter("tags", tags)
        if title is not None:
            _setter("title", title)
        if type is not None:
            _setter("type", type)
        if url is not None:
            _setter("url", url)
        if username is not None:
            _setter("username", username)
        if uuid is not None:
            _setter("uuid", uuid)
        if vault is not None:
            _setter("vault", vault)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        The category of the item. One of ["login" "password" "database"]
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        (Only applies to the database category) The name of the database.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        (Only applies to the database category) The address where the database can be found
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordRecipe")
    def password_recipe(self) -> Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password_recipe")

    @password_recipe.setter
    def password_recipe(self, value: Optional[pulumi.Input['OnepasswordItemPasswordRecipeArgs']]):
        pulumi.set(self, "password_recipe", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        (Only applies to the database category) The port the database is listening on.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sections(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]]:
        """
        A list of custom sections in an item
        """
        return pulumi.get(self, "sections")

    @sections.setter
    def sections(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionArgs']]]]):
        pulumi.set(self, "sections", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of strings of the tags assigned to the item.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the item.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The primary URL for the item.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for this item.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def uuid(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the item. Item identifiers are unique within a specific vault.
        """
        return pulumi.get(self, "uuid")

    @uuid.setter
    def uuid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uuid", value)

    @property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of the vault the item is in.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vault", value)


class OnepasswordItem(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_recipe: Optional[pulumi.Input[pulumi.InputType['OnepasswordItemPasswordRecipeArgs']]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OnepasswordItemSectionArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vault: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A 1Password item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onepassword as onepassword

        demo_password = onepassword.OnepasswordItem("demoPassword",
            vault=var["demo_vault"],
            title="Demo Password Recipe",
            category="password",
            password_recipe=onepassword.OnepasswordItemPasswordRecipeArgs(
                length=40,
                symbols=False,
            ))
        demo_login = onepassword.OnepasswordItem("demoLogin",
            vault=var["demo_vault"],
            title="Demo Terraform Login",
            category="login",
            username="test@example.com")
        demo_db = onepassword.OnepasswordItem("demoDb",
            vault=var["demo_vault"],
            category="database",
            type="mysql",
            title="Demo TF Database",
            username="root",
            database="Example MySQL Instance",
            hostname="localhost",
            port="3306")
        ```

        ## Import

        import an existing 1Password item

        ```sh
         $ pulumi import onepassword:index/onepasswordItem:OnepasswordItem myitem vaults/<vault uuid>/items/<item uuid>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: The category of the item. One of ["login" "password" "database"]
        :param pulumi.Input[str] database: (Only applies to the database category) The name of the database.
        :param pulumi.Input[str] hostname: (Only applies to the database category) The address where the database can be found
        :param pulumi.Input[str] password: Password for this item.
        :param pulumi.Input[pulumi.InputType['OnepasswordItemPasswordRecipeArgs']] password_recipe: Password for this item.
        :param pulumi.Input[str] port: (Only applies to the database category) The port the database is listening on.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OnepasswordItemSectionArgs']]]] sections: A list of custom sections in an item
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An array of strings of the tags assigned to the item.
        :param pulumi.Input[str] title: The title of the item.
        :param pulumi.Input[str] type: The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param pulumi.Input[str] url: The primary URL for the item.
        :param pulumi.Input[str] username: Username for this item.
        :param pulumi.Input[str] vault: The UUID of the vault the item is in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnepasswordItemArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A 1Password item.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_onepassword as onepassword

        demo_password = onepassword.OnepasswordItem("demoPassword",
            vault=var["demo_vault"],
            title="Demo Password Recipe",
            category="password",
            password_recipe=onepassword.OnepasswordItemPasswordRecipeArgs(
                length=40,
                symbols=False,
            ))
        demo_login = onepassword.OnepasswordItem("demoLogin",
            vault=var["demo_vault"],
            title="Demo Terraform Login",
            category="login",
            username="test@example.com")
        demo_db = onepassword.OnepasswordItem("demoDb",
            vault=var["demo_vault"],
            category="database",
            type="mysql",
            title="Demo TF Database",
            username="root",
            database="Example MySQL Instance",
            hostname="localhost",
            port="3306")
        ```

        ## Import

        import an existing 1Password item

        ```sh
         $ pulumi import onepassword:index/onepasswordItem:OnepasswordItem myitem vaults/<vault uuid>/items/<item uuid>
        ```

        :param str resource_name: The name of the resource.
        :param OnepasswordItemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnepasswordItemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            OnepasswordItemArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_recipe: Optional[pulumi.Input[pulumi.InputType['OnepasswordItemPasswordRecipeArgs']]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 sections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OnepasswordItemSectionArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 vault: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnepasswordItemArgs.__new__(OnepasswordItemArgs)

            __props__.__dict__["category"] = category
            __props__.__dict__["database"] = database
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if password_recipe is not None and not isinstance(password_recipe, OnepasswordItemPasswordRecipeArgs):
                password_recipe = password_recipe or {}
                def _setter(key, value):
                    password_recipe[key] = value
                OnepasswordItemPasswordRecipeArgs._configure(_setter, **password_recipe)
            __props__.__dict__["password_recipe"] = password_recipe
            __props__.__dict__["port"] = port
            __props__.__dict__["sections"] = sections
            __props__.__dict__["tags"] = tags
            __props__.__dict__["title"] = title
            __props__.__dict__["type"] = type
            __props__.__dict__["url"] = url
            __props__.__dict__["username"] = username
            if vault is None and not opts.urn:
                raise TypeError("Missing required property 'vault'")
            __props__.__dict__["vault"] = vault
            __props__.__dict__["uuid"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(OnepasswordItem, __self__).__init__(
            'onepassword:index/onepasswordItem:OnepasswordItem',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            category: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_recipe: Optional[pulumi.Input[pulumi.InputType['OnepasswordItemPasswordRecipeArgs']]] = None,
            port: Optional[pulumi.Input[str]] = None,
            sections: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OnepasswordItemSectionArgs']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            title: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            uuid: Optional[pulumi.Input[str]] = None,
            vault: Optional[pulumi.Input[str]] = None) -> 'OnepasswordItem':
        """
        Get an existing OnepasswordItem resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: The category of the item. One of ["login" "password" "database"]
        :param pulumi.Input[str] database: (Only applies to the database category) The name of the database.
        :param pulumi.Input[str] hostname: (Only applies to the database category) The address where the database can be found
        :param pulumi.Input[str] password: Password for this item.
        :param pulumi.Input[pulumi.InputType['OnepasswordItemPasswordRecipeArgs']] password_recipe: Password for this item.
        :param pulumi.Input[str] port: (Only applies to the database category) The port the database is listening on.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OnepasswordItemSectionArgs']]]] sections: A list of custom sections in an item
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An array of strings of the tags assigned to the item.
        :param pulumi.Input[str] title: The title of the item.
        :param pulumi.Input[str] type: The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param pulumi.Input[str] url: The primary URL for the item.
        :param pulumi.Input[str] username: Username for this item.
        :param pulumi.Input[str] uuid: The UUID of the item. Item identifiers are unique within a specific vault.
        :param pulumi.Input[str] vault: The UUID of the vault the item is in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnepasswordItemState.__new__(_OnepasswordItemState)

        __props__.__dict__["category"] = category
        __props__.__dict__["database"] = database
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["password"] = password
        __props__.__dict__["password_recipe"] = password_recipe
        __props__.__dict__["port"] = port
        __props__.__dict__["sections"] = sections
        __props__.__dict__["tags"] = tags
        __props__.__dict__["title"] = title
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["username"] = username
        __props__.__dict__["uuid"] = uuid
        __props__.__dict__["vault"] = vault
        return OnepasswordItem(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[Optional[str]]:
        """
        The category of the item. One of ["login" "password" "database"]
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[Optional[str]]:
        """
        (Only applies to the database category) The name of the database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[str]]:
        """
        (Only applies to the database category) The address where the database can be found
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordRecipe")
    def password_recipe(self) -> pulumi.Output[Optional['outputs.OnepasswordItemPasswordRecipe']]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password_recipe")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[str]]:
        """
        (Only applies to the database category) The port the database is listening on.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def sections(self) -> pulumi.Output[Optional[Sequence['outputs.OnepasswordItemSection']]]:
        """
        A list of custom sections in an item
        """
        return pulumi.get(self, "sections")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        An array of strings of the tags assigned to the item.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[Optional[str]]:
        """
        The title of the item.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[Optional[str]]:
        """
        The primary URL for the item.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Username for this item.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def uuid(self) -> pulumi.Output[str]:
        """
        The UUID of the item. Item identifiers are unique within a specific vault.
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vault(self) -> pulumi.Output[str]:
        """
        The UUID of the vault the item is in.
        """
        return pulumi.get(self, "vault")

