# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'OnepasswordItemPasswordRecipeArgs',
    'OnepasswordItemSectionArgs',
    'OnepasswordItemSectionFieldArgs',
    'OnepasswordItemSectionFieldPasswordRecipeArgs',
]

@pulumi.input_type
class OnepasswordItemPasswordRecipeArgs:
    def __init__(__self__, *,
                 digits: Optional[pulumi.Input[bool]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 letters: Optional[pulumi.Input[bool]] = None,
                 symbols: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] digits: Use digits [0-9] when generating the password.
        :param pulumi.Input[int] length: The length of the password to be generated.
        :param pulumi.Input[bool] letters: Use letters [a-zA-Z] when generating the password.
        :param pulumi.Input[bool] symbols: Use symbols [!@.-_*] when generating the password.
        """
        OnepasswordItemPasswordRecipeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            digits=digits,
            length=length,
            letters=letters,
            symbols=symbols,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             digits: Optional[pulumi.Input[bool]] = None,
             length: Optional[pulumi.Input[int]] = None,
             letters: Optional[pulumi.Input[bool]] = None,
             symbols: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if digits is not None:
            _setter("digits", digits)
        if length is not None:
            _setter("length", length)
        if letters is not None:
            _setter("letters", letters)
        if symbols is not None:
            _setter("symbols", symbols)

    @property
    @pulumi.getter
    def digits(self) -> Optional[pulumi.Input[bool]]:
        """
        Use digits [0-9] when generating the password.
        """
        return pulumi.get(self, "digits")

    @digits.setter
    def digits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digits", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        The length of the password to be generated.
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def letters(self) -> Optional[pulumi.Input[bool]]:
        """
        Use letters [a-zA-Z] when generating the password.
        """
        return pulumi.get(self, "letters")

    @letters.setter
    def letters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "letters", value)

    @property
    @pulumi.getter
    def symbols(self) -> Optional[pulumi.Input[bool]]:
        """
        Use symbols [!@.-_*] when generating the password.
        """
        return pulumi.get(self, "symbols")

    @symbols.setter
    def symbols(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "symbols", value)


@pulumi.input_type
class OnepasswordItemSectionArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionFieldArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] label: The label for the section.
        :param pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionFieldArgs']]] fields: A list of custom fields in the section.
        :param pulumi.Input[str] id: A unique identifier for the section.
        """
        OnepasswordItemSectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            fields=fields,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: pulumi.Input[str],
             fields: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionFieldArgs']]]] = None,
             id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        if fields is not None:
            _setter("fields", fields)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        The label for the section.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionFieldArgs']]]]:
        """
        A list of custom fields in the section.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OnepasswordItemSectionFieldArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for the section.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class OnepasswordItemSectionFieldArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 password_recipe: Optional[pulumi.Input['OnepasswordItemSectionFieldPasswordRecipeArgs']] = None,
                 purpose: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] label: The label for the field.
        :param pulumi.Input[str] id: A unique identifier for the field.
        :param pulumi.Input['OnepasswordItemSectionFieldPasswordRecipeArgs'] password_recipe: Password for this item.
        :param pulumi.Input[str] purpose: Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        :param pulumi.Input[str] type: The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param pulumi.Input[str] value: The value of the field.
        """
        OnepasswordItemSectionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            id=id,
            password_recipe=password_recipe,
            purpose=purpose,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: pulumi.Input[str],
             id: Optional[pulumi.Input[str]] = None,
             password_recipe: Optional[pulumi.Input['OnepasswordItemSectionFieldPasswordRecipeArgs']] = None,
             purpose: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        if id is not None:
            _setter("id", id)
        if password_recipe is not None:
            _setter("password_recipe", password_recipe)
        if purpose is not None:
            _setter("purpose", purpose)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        The label for the field.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier for the field.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="passwordRecipe")
    def password_recipe(self) -> Optional[pulumi.Input['OnepasswordItemSectionFieldPasswordRecipeArgs']]:
        """
        Password for this item.
        """
        return pulumi.get(self, "password_recipe")

    @password_recipe.setter
    def password_recipe(self, value: Optional[pulumi.Input['OnepasswordItemSectionFieldPasswordRecipeArgs']]):
        pulumi.set(self, "password_recipe", value)

    @property
    @pulumi.getter
    def purpose(self) -> Optional[pulumi.Input[str]]:
        """
        Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        """
        return pulumi.get(self, "purpose")

    @purpose.setter
    def purpose(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "purpose", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the field.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OnepasswordItemSectionFieldPasswordRecipeArgs:
    def __init__(__self__, *,
                 digits: Optional[pulumi.Input[bool]] = None,
                 length: Optional[pulumi.Input[int]] = None,
                 letters: Optional[pulumi.Input[bool]] = None,
                 symbols: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] digits: Use digits [0-9] when generating the password.
        :param pulumi.Input[int] length: The length of the password to be generated.
        :param pulumi.Input[bool] letters: Use letters [a-zA-Z] when generating the password.
        :param pulumi.Input[bool] symbols: Use symbols [!@.-_*] when generating the password.
        """
        OnepasswordItemSectionFieldPasswordRecipeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            digits=digits,
            length=length,
            letters=letters,
            symbols=symbols,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             digits: Optional[pulumi.Input[bool]] = None,
             length: Optional[pulumi.Input[int]] = None,
             letters: Optional[pulumi.Input[bool]] = None,
             symbols: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if digits is not None:
            _setter("digits", digits)
        if length is not None:
            _setter("length", length)
        if letters is not None:
            _setter("letters", letters)
        if symbols is not None:
            _setter("symbols", symbols)

    @property
    @pulumi.getter
    def digits(self) -> Optional[pulumi.Input[bool]]:
        """
        Use digits [0-9] when generating the password.
        """
        return pulumi.get(self, "digits")

    @digits.setter
    def digits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digits", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[int]]:
        """
        The length of the password to be generated.
        """
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter
    def letters(self) -> Optional[pulumi.Input[bool]]:
        """
        Use letters [a-zA-Z] when generating the password.
        """
        return pulumi.get(self, "letters")

    @letters.setter
    def letters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "letters", value)

    @property
    @pulumi.getter
    def symbols(self) -> Optional[pulumi.Input[bool]]:
        """
        Use symbols [!@.-_*] when generating the password.
        """
        return pulumi.get(self, "symbols")

    @symbols.setter
    def symbols(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "symbols", value)


