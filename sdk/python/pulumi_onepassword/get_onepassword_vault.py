# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetOnepasswordVaultResult',
    'AwaitableGetOnepasswordVaultResult',
    'get_onepassword_vault',
    'get_onepassword_vault_output',
]

@pulumi.output_type
class GetOnepasswordVaultResult:
    """
    A collection of values returned by getOnepasswordVault.
    """
    def __init__(__self__, description=None, id=None, name=None, uuid=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the vault.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the vault to retrieve. This field will be populated with the name of the vault if the vault it looked up by its UUID.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        The UUID of the vault to retrieve. This field will be populated with the UUID of the vault if the vault it looked up by its name.
        """
        return pulumi.get(self, "uuid")


class AwaitableGetOnepasswordVaultResult(GetOnepasswordVaultResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOnepasswordVaultResult(
            description=self.description,
            id=self.id,
            name=self.name,
            uuid=self.uuid)


def get_onepassword_vault(name: Optional[str] = None,
                          uuid: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOnepasswordVaultResult:
    """
    Use this data source to get details of a vault by either its name or uuid.


    :param str name: The name of the vault to retrieve. This field will be populated with the name of the vault if the vault it looked up by its UUID.
    :param str uuid: The UUID of the vault to retrieve. This field will be populated with the UUID of the vault if the vault it looked up by its name.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('onepassword:index/getOnepasswordVault:getOnepasswordVault', __args__, opts=opts, typ=GetOnepasswordVaultResult).value

    return AwaitableGetOnepasswordVaultResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        uuid=pulumi.get(__ret__, 'uuid'))


@_utilities.lift_output_func(get_onepassword_vault)
def get_onepassword_vault_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                                 uuid: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOnepasswordVaultResult]:
    """
    Use this data source to get details of a vault by either its name or uuid.


    :param str name: The name of the vault to retrieve. This field will be populated with the name of the vault if the vault it looked up by its UUID.
    :param str uuid: The UUID of the vault to retrieve. This field will be populated with the UUID of the vault if the vault it looked up by its name.
    """
    ...
