# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'OnepasswordItemPasswordRecipe',
    'OnepasswordItemSection',
    'OnepasswordItemSectionField',
    'OnepasswordItemSectionFieldPasswordRecipe',
    'GetOnepasswordItemSectionResult',
    'GetOnepasswordItemSectionFieldResult',
]

@pulumi.output_type
class OnepasswordItemPasswordRecipe(dict):
    def __init__(__self__, *,
                 digits: Optional[bool] = None,
                 length: Optional[int] = None,
                 letters: Optional[bool] = None,
                 symbols: Optional[bool] = None):
        """
        :param bool digits: Use digits [0-9] when generating the password.
        :param int length: The length of the password to be generated.
        :param bool letters: Use letters [a-zA-Z] when generating the password.
        :param bool symbols: Use symbols [!@.-_*] when generating the password.
        """
        OnepasswordItemPasswordRecipe._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            digits=digits,
            length=length,
            letters=letters,
            symbols=symbols,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             digits: Optional[bool] = None,
             length: Optional[int] = None,
             letters: Optional[bool] = None,
             symbols: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if digits is not None:
            _setter("digits", digits)
        if length is not None:
            _setter("length", length)
        if letters is not None:
            _setter("letters", letters)
        if symbols is not None:
            _setter("symbols", symbols)

    @property
    @pulumi.getter
    def digits(self) -> Optional[bool]:
        """
        Use digits [0-9] when generating the password.
        """
        return pulumi.get(self, "digits")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        The length of the password to be generated.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def letters(self) -> Optional[bool]:
        """
        Use letters [a-zA-Z] when generating the password.
        """
        return pulumi.get(self, "letters")

    @property
    @pulumi.getter
    def symbols(self) -> Optional[bool]:
        """
        Use symbols [!@.-_*] when generating the password.
        """
        return pulumi.get(self, "symbols")


@pulumi.output_type
class OnepasswordItemSection(dict):
    def __init__(__self__, *,
                 label: str,
                 fields: Optional[Sequence['outputs.OnepasswordItemSectionField']] = None,
                 id: Optional[str] = None):
        """
        :param str label: The label for the section.
        :param Sequence['OnepasswordItemSectionFieldArgs'] fields: A list of custom fields in the section.
        :param str id: A unique identifier for the section.
        """
        OnepasswordItemSection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            fields=fields,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             fields: Optional[Sequence['outputs.OnepasswordItemSectionField']] = None,
             id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        if fields is not None:
            _setter("fields", fields)
        if id is not None:
            _setter("id", id)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the section.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.OnepasswordItemSectionField']]:
        """
        A list of custom fields in the section.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier for the section.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class OnepasswordItemSectionField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordRecipe":
            suggest = "password_recipe"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OnepasswordItemSectionField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OnepasswordItemSectionField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OnepasswordItemSectionField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label: str,
                 id: Optional[str] = None,
                 password_recipe: Optional['outputs.OnepasswordItemSectionFieldPasswordRecipe'] = None,
                 purpose: Optional[str] = None,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str label: The label for the field.
        :param str id: A unique identifier for the field.
        :param 'OnepasswordItemSectionFieldPasswordRecipeArgs' password_recipe: Password for this item.
        :param str purpose: Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        :param str type: The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        :param str value: The value of the field.
        """
        OnepasswordItemSectionField._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            id=id,
            password_recipe=password_recipe,
            purpose=purpose,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: str,
             id: Optional[str] = None,
             password_recipe: Optional['outputs.OnepasswordItemSectionFieldPasswordRecipe'] = None,
             purpose: Optional[str] = None,
             type: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("label", label)
        if id is not None:
            _setter("id", id)
        if password_recipe is not None:
            _setter("password_recipe", password_recipe)
        if purpose is not None:
            _setter("purpose", purpose)
        if type is not None:
            _setter("type", type)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def label(self) -> str:
        """
        The label for the field.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier for the field.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="passwordRecipe")
    def password_recipe(self) -> Optional['outputs.OnepasswordItemSectionFieldPasswordRecipe']:
        """
        Password for this item.
        """
        return pulumi.get(self, "password_recipe")

    @property
    @pulumi.getter
    def purpose(self) -> Optional[str]:
        """
        Purpose indicates this is a special field: a username, password, or notes field. One of ["USERNAME" "PASSWORD" "NOTES"]
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        The value of the field.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OnepasswordItemSectionFieldPasswordRecipe(dict):
    def __init__(__self__, *,
                 digits: Optional[bool] = None,
                 length: Optional[int] = None,
                 letters: Optional[bool] = None,
                 symbols: Optional[bool] = None):
        """
        :param bool digits: Use digits [0-9] when generating the password.
        :param int length: The length of the password to be generated.
        :param bool letters: Use letters [a-zA-Z] when generating the password.
        :param bool symbols: Use symbols [!@.-_*] when generating the password.
        """
        OnepasswordItemSectionFieldPasswordRecipe._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            digits=digits,
            length=length,
            letters=letters,
            symbols=symbols,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             digits: Optional[bool] = None,
             length: Optional[int] = None,
             letters: Optional[bool] = None,
             symbols: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if digits is not None:
            _setter("digits", digits)
        if length is not None:
            _setter("length", length)
        if letters is not None:
            _setter("letters", letters)
        if symbols is not None:
            _setter("symbols", symbols)

    @property
    @pulumi.getter
    def digits(self) -> Optional[bool]:
        """
        Use digits [0-9] when generating the password.
        """
        return pulumi.get(self, "digits")

    @property
    @pulumi.getter
    def length(self) -> Optional[int]:
        """
        The length of the password to be generated.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def letters(self) -> Optional[bool]:
        """
        Use letters [a-zA-Z] when generating the password.
        """
        return pulumi.get(self, "letters")

    @property
    @pulumi.getter
    def symbols(self) -> Optional[bool]:
        """
        Use symbols [!@.-_*] when generating the password.
        """
        return pulumi.get(self, "symbols")


@pulumi.output_type
class GetOnepasswordItemSectionResult(dict):
    def __init__(__self__, *,
                 fields: Sequence['outputs.GetOnepasswordItemSectionFieldResult'],
                 id: str,
                 label: str):
        GetOnepasswordItemSectionResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fields=fields,
            id=id,
            label=label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fields: Sequence['outputs.GetOnepasswordItemSectionFieldResult'],
             id: str,
             label: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("fields", fields)
        _setter("id", id)
        _setter("label", label)

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetOnepasswordItemSectionFieldResult']:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")


@pulumi.output_type
class GetOnepasswordItemSectionFieldResult(dict):
    def __init__(__self__, *,
                 id: str,
                 label: str,
                 purpose: str,
                 type: str,
                 value: str):
        """
        :param str type: (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql" "oracle" "postgresql" "sqlite" "other"]
        """
        GetOnepasswordItemSectionFieldResult._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            label=label,
            purpose=purpose,
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             label: str,
             purpose: str,
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("label", label)
        _setter("purpose", purpose)
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def label(self) -> str:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def purpose(self) -> str:
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql" "oracle" "postgresql" "sqlite" "other"]
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


