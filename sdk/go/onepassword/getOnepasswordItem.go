// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get details of an item by its vault uuid and either the title or the uuid of the item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := onepassword.LookupOnepasswordItem(ctx, &onepassword.LookupOnepasswordItemArgs{
//				Vault: _var.Demo_vault,
//				Uuid:  pulumi.StringRef(onepassword_item.Demo_sections.Uuid),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupOnepasswordItem(ctx *pulumi.Context, args *LookupOnepasswordItemArgs, opts ...pulumi.InvokeOption) (*LookupOnepasswordItemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupOnepasswordItemResult
	err := ctx.Invoke("onepassword:index/getOnepasswordItem:getOnepasswordItem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getOnepasswordItem.
type LookupOnepasswordItemArgs struct {
	// Secure Note value.
	NoteValue *string `pulumi:"noteValue"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title *string `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid *string `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// A collection of values returned by getOnepasswordItem.
type LookupOnepasswordItemResult struct {
	// The category of the item. One of ["login" "password" "database"]
	Category string `pulumi:"category"`
	// (Only applies to the database category) The name of the database.
	Database string `pulumi:"database"`
	// (Only applies to the database category) The address where the database can be found
	Hostname string `pulumi:"hostname"`
	Id       string `pulumi:"id"`
	// Secure Note value.
	NoteValue string `pulumi:"noteValue"`
	// Password for this item.
	Password string `pulumi:"password"`
	// (Only applies to the database category) The port the database is listening on.
	Port string `pulumi:"port"`
	// A list of custom sections in an item
	Sections []GetOnepasswordItemSection `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title string `pulumi:"title"`
	// (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql" "oracle" "postgresql" "sqlite" "other"]
	Type string `pulumi:"type"`
	// The primary URL for the item.
	Url string `pulumi:"url"`
	// Username for this item.
	Username string `pulumi:"username"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid string `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

func LookupOnepasswordItemOutput(ctx *pulumi.Context, args LookupOnepasswordItemOutputArgs, opts ...pulumi.InvokeOption) LookupOnepasswordItemResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupOnepasswordItemResult, error) {
			args := v.(LookupOnepasswordItemArgs)
			r, err := LookupOnepasswordItem(ctx, &args, opts...)
			var s LookupOnepasswordItemResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupOnepasswordItemResultOutput)
}

// A collection of arguments for invoking getOnepasswordItem.
type LookupOnepasswordItemOutputArgs struct {
	// Secure Note value.
	NoteValue pulumi.StringPtrInput `pulumi:"noteValue"`
	// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput `pulumi:"vault"`
}

func (LookupOnepasswordItemOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOnepasswordItemArgs)(nil)).Elem()
}

// A collection of values returned by getOnepasswordItem.
type LookupOnepasswordItemResultOutput struct{ *pulumi.OutputState }

func (LookupOnepasswordItemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupOnepasswordItemResult)(nil)).Elem()
}

func (o LookupOnepasswordItemResultOutput) ToLookupOnepasswordItemResultOutput() LookupOnepasswordItemResultOutput {
	return o
}

func (o LookupOnepasswordItemResultOutput) ToLookupOnepasswordItemResultOutputWithContext(ctx context.Context) LookupOnepasswordItemResultOutput {
	return o
}

func (o LookupOnepasswordItemResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupOnepasswordItemResult] {
	return pulumix.Output[LookupOnepasswordItemResult]{
		OutputState: o.OutputState,
	}
}

// The category of the item. One of ["login" "password" "database"]
func (o LookupOnepasswordItemResultOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Category }).(pulumi.StringOutput)
}

// (Only applies to the database category) The name of the database.
func (o LookupOnepasswordItemResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Database }).(pulumi.StringOutput)
}

// (Only applies to the database category) The address where the database can be found
func (o LookupOnepasswordItemResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Hostname }).(pulumi.StringOutput)
}

func (o LookupOnepasswordItemResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Id }).(pulumi.StringOutput)
}

// Secure Note value.
func (o LookupOnepasswordItemResultOutput) NoteValue() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.NoteValue }).(pulumi.StringOutput)
}

// Password for this item.
func (o LookupOnepasswordItemResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Password }).(pulumi.StringOutput)
}

// (Only applies to the database category) The port the database is listening on.
func (o LookupOnepasswordItemResultOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Port }).(pulumi.StringOutput)
}

// A list of custom sections in an item
func (o LookupOnepasswordItemResultOutput) Sections() GetOnepasswordItemSectionArrayOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) []GetOnepasswordItemSection { return v.Sections }).(GetOnepasswordItemSectionArrayOutput)
}

// An array of strings of the tags assigned to the item.
func (o LookupOnepasswordItemResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The title of the item to retrieve. This field will be populated with the title of the item if the item it looked up by its UUID.
func (o LookupOnepasswordItemResultOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Title }).(pulumi.StringOutput)
}

// (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql" "oracle" "postgresql" "sqlite" "other"]
func (o LookupOnepasswordItemResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Type }).(pulumi.StringOutput)
}

// The primary URL for the item.
func (o LookupOnepasswordItemResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Url }).(pulumi.StringOutput)
}

// Username for this item.
func (o LookupOnepasswordItemResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Username }).(pulumi.StringOutput)
}

// The UUID of the item to retrieve. This field will be populated with the UUID of the item if the item it looked up by its title.
func (o LookupOnepasswordItemResultOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Uuid }).(pulumi.StringOutput)
}

// The UUID of the vault the item is in.
func (o LookupOnepasswordItemResultOutput) Vault() pulumi.StringOutput {
	return o.ApplyT(func(v LookupOnepasswordItemResult) string { return v.Vault }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupOnepasswordItemResultOutput{})
}
