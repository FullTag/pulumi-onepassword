// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package onepassword

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// A 1Password item.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-onepassword/sdk/go/onepassword"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := onepassword.NewOnepasswordItem(ctx, "demoPassword", &onepassword.OnepasswordItemArgs{
//				Vault:    pulumi.Any(_var.Demo_vault),
//				Title:    pulumi.String("Demo Password Recipe"),
//				Category: pulumi.String("password"),
//				PasswordRecipe: &onepassword.OnepasswordItemPasswordRecipeArgs{
//					Length:  pulumi.Int(40),
//					Symbols: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = onepassword.NewOnepasswordItem(ctx, "demoLogin", &onepassword.OnepasswordItemArgs{
//				Vault:    pulumi.Any(_var.Demo_vault),
//				Title:    pulumi.String("Demo Terraform Login"),
//				Category: pulumi.String("login"),
//				Username: pulumi.String("test@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = onepassword.NewOnepasswordItem(ctx, "demoDb", &onepassword.OnepasswordItemArgs{
//				Vault:    pulumi.Any(_var.Demo_vault),
//				Category: pulumi.String("database"),
//				Type:     pulumi.String("mysql"),
//				Title:    pulumi.String("Demo TF Database"),
//				Username: pulumi.String("root"),
//				Database: pulumi.String("Example MySQL Instance"),
//				Hostname: pulumi.String("localhost"),
//				Port:     pulumi.String("3306"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// import an existing 1Password item
//
// ```sh
//
//	$ pulumi import onepassword:index/onepasswordItem:OnepasswordItem myitem vaults/<vault uuid>/items/<item uuid>
//
// ```
type OnepasswordItem struct {
	pulumi.CustomResourceState

	// The category of the item. One of ["login" "password" "database"]
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// (Only applies to the database category) The name of the database.
	Database pulumi.StringPtrOutput `pulumi:"database"`
	// (Only applies to the database category) The address where the database can be found
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// Password for this item.
	Password pulumi.StringOutput `pulumi:"password"`
	// Password for this item.
	PasswordRecipe OnepasswordItemPasswordRecipePtrOutput `pulumi:"passwordRecipe"`
	// (Only applies to the database category) The port the database is listening on.
	Port pulumi.StringPtrOutput `pulumi:"port"`
	// A list of custom sections in an item
	Sections OnepasswordItemSectionArrayOutput `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The title of the item.
	Title pulumi.StringPtrOutput `pulumi:"title"`
	// The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The primary URL for the item.
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// Username for this item.
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// The UUID of the item. Item identifiers are unique within a specific vault.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault pulumi.StringOutput `pulumi:"vault"`
}

// NewOnepasswordItem registers a new resource with the given unique name, arguments, and options.
func NewOnepasswordItem(ctx *pulumi.Context,
	name string, args *OnepasswordItemArgs, opts ...pulumi.ResourceOption) (*OnepasswordItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vault == nil {
		return nil, errors.New("invalid value for required argument 'Vault'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OnepasswordItem
	err := ctx.RegisterResource("onepassword:index/onepasswordItem:OnepasswordItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOnepasswordItem gets an existing OnepasswordItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOnepasswordItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OnepasswordItemState, opts ...pulumi.ResourceOption) (*OnepasswordItem, error) {
	var resource OnepasswordItem
	err := ctx.ReadResource("onepassword:index/onepasswordItem:OnepasswordItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OnepasswordItem resources.
type onepasswordItemState struct {
	// The category of the item. One of ["login" "password" "database"]
	Category *string `pulumi:"category"`
	// (Only applies to the database category) The name of the database.
	Database *string `pulumi:"database"`
	// (Only applies to the database category) The address where the database can be found
	Hostname *string `pulumi:"hostname"`
	// Password for this item.
	Password *string `pulumi:"password"`
	// Password for this item.
	PasswordRecipe *OnepasswordItemPasswordRecipe `pulumi:"passwordRecipe"`
	// (Only applies to the database category) The port the database is listening on.
	Port *string `pulumi:"port"`
	// A list of custom sections in an item
	Sections []OnepasswordItemSection `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item.
	Title *string `pulumi:"title"`
	// The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
	Type *string `pulumi:"type"`
	// The primary URL for the item.
	Url *string `pulumi:"url"`
	// Username for this item.
	Username *string `pulumi:"username"`
	// The UUID of the item. Item identifiers are unique within a specific vault.
	Uuid *string `pulumi:"uuid"`
	// The UUID of the vault the item is in.
	Vault *string `pulumi:"vault"`
}

type OnepasswordItemState struct {
	// The category of the item. One of ["login" "password" "database"]
	Category pulumi.StringPtrInput
	// (Only applies to the database category) The name of the database.
	Database pulumi.StringPtrInput
	// (Only applies to the database category) The address where the database can be found
	Hostname pulumi.StringPtrInput
	// Password for this item.
	Password pulumi.StringPtrInput
	// Password for this item.
	PasswordRecipe OnepasswordItemPasswordRecipePtrInput
	// (Only applies to the database category) The port the database is listening on.
	Port pulumi.StringPtrInput
	// A list of custom sections in an item
	Sections OnepasswordItemSectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item.
	Title pulumi.StringPtrInput
	// The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
	Type pulumi.StringPtrInput
	// The primary URL for the item.
	Url pulumi.StringPtrInput
	// Username for this item.
	Username pulumi.StringPtrInput
	// The UUID of the item. Item identifiers are unique within a specific vault.
	Uuid pulumi.StringPtrInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringPtrInput
}

func (OnepasswordItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*onepasswordItemState)(nil)).Elem()
}

type onepasswordItemArgs struct {
	// The category of the item. One of ["login" "password" "database"]
	Category *string `pulumi:"category"`
	// (Only applies to the database category) The name of the database.
	Database *string `pulumi:"database"`
	// (Only applies to the database category) The address where the database can be found
	Hostname *string `pulumi:"hostname"`
	// Password for this item.
	Password *string `pulumi:"password"`
	// Password for this item.
	PasswordRecipe *OnepasswordItemPasswordRecipe `pulumi:"passwordRecipe"`
	// (Only applies to the database category) The port the database is listening on.
	Port *string `pulumi:"port"`
	// A list of custom sections in an item
	Sections []OnepasswordItemSection `pulumi:"sections"`
	// An array of strings of the tags assigned to the item.
	Tags []string `pulumi:"tags"`
	// The title of the item.
	Title *string `pulumi:"title"`
	// The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
	Type *string `pulumi:"type"`
	// The primary URL for the item.
	Url *string `pulumi:"url"`
	// Username for this item.
	Username *string `pulumi:"username"`
	// The UUID of the vault the item is in.
	Vault string `pulumi:"vault"`
}

// The set of arguments for constructing a OnepasswordItem resource.
type OnepasswordItemArgs struct {
	// The category of the item. One of ["login" "password" "database"]
	Category pulumi.StringPtrInput
	// (Only applies to the database category) The name of the database.
	Database pulumi.StringPtrInput
	// (Only applies to the database category) The address where the database can be found
	Hostname pulumi.StringPtrInput
	// Password for this item.
	Password pulumi.StringPtrInput
	// Password for this item.
	PasswordRecipe OnepasswordItemPasswordRecipePtrInput
	// (Only applies to the database category) The port the database is listening on.
	Port pulumi.StringPtrInput
	// A list of custom sections in an item
	Sections OnepasswordItemSectionArrayInput
	// An array of strings of the tags assigned to the item.
	Tags pulumi.StringArrayInput
	// The title of the item.
	Title pulumi.StringPtrInput
	// The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
	Type pulumi.StringPtrInput
	// The primary URL for the item.
	Url pulumi.StringPtrInput
	// Username for this item.
	Username pulumi.StringPtrInput
	// The UUID of the vault the item is in.
	Vault pulumi.StringInput
}

func (OnepasswordItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*onepasswordItemArgs)(nil)).Elem()
}

type OnepasswordItemInput interface {
	pulumi.Input

	ToOnepasswordItemOutput() OnepasswordItemOutput
	ToOnepasswordItemOutputWithContext(ctx context.Context) OnepasswordItemOutput
}

func (*OnepasswordItem) ElementType() reflect.Type {
	return reflect.TypeOf((**OnepasswordItem)(nil)).Elem()
}

func (i *OnepasswordItem) ToOnepasswordItemOutput() OnepasswordItemOutput {
	return i.ToOnepasswordItemOutputWithContext(context.Background())
}

func (i *OnepasswordItem) ToOnepasswordItemOutputWithContext(ctx context.Context) OnepasswordItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnepasswordItemOutput)
}

func (i *OnepasswordItem) ToOutput(ctx context.Context) pulumix.Output[*OnepasswordItem] {
	return pulumix.Output[*OnepasswordItem]{
		OutputState: i.ToOnepasswordItemOutputWithContext(ctx).OutputState,
	}
}

// OnepasswordItemArrayInput is an input type that accepts OnepasswordItemArray and OnepasswordItemArrayOutput values.
// You can construct a concrete instance of `OnepasswordItemArrayInput` via:
//
//	OnepasswordItemArray{ OnepasswordItemArgs{...} }
type OnepasswordItemArrayInput interface {
	pulumi.Input

	ToOnepasswordItemArrayOutput() OnepasswordItemArrayOutput
	ToOnepasswordItemArrayOutputWithContext(context.Context) OnepasswordItemArrayOutput
}

type OnepasswordItemArray []OnepasswordItemInput

func (OnepasswordItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnepasswordItem)(nil)).Elem()
}

func (i OnepasswordItemArray) ToOnepasswordItemArrayOutput() OnepasswordItemArrayOutput {
	return i.ToOnepasswordItemArrayOutputWithContext(context.Background())
}

func (i OnepasswordItemArray) ToOnepasswordItemArrayOutputWithContext(ctx context.Context) OnepasswordItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnepasswordItemArrayOutput)
}

func (i OnepasswordItemArray) ToOutput(ctx context.Context) pulumix.Output[[]*OnepasswordItem] {
	return pulumix.Output[[]*OnepasswordItem]{
		OutputState: i.ToOnepasswordItemArrayOutputWithContext(ctx).OutputState,
	}
}

// OnepasswordItemMapInput is an input type that accepts OnepasswordItemMap and OnepasswordItemMapOutput values.
// You can construct a concrete instance of `OnepasswordItemMapInput` via:
//
//	OnepasswordItemMap{ "key": OnepasswordItemArgs{...} }
type OnepasswordItemMapInput interface {
	pulumi.Input

	ToOnepasswordItemMapOutput() OnepasswordItemMapOutput
	ToOnepasswordItemMapOutputWithContext(context.Context) OnepasswordItemMapOutput
}

type OnepasswordItemMap map[string]OnepasswordItemInput

func (OnepasswordItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnepasswordItem)(nil)).Elem()
}

func (i OnepasswordItemMap) ToOnepasswordItemMapOutput() OnepasswordItemMapOutput {
	return i.ToOnepasswordItemMapOutputWithContext(context.Background())
}

func (i OnepasswordItemMap) ToOnepasswordItemMapOutputWithContext(ctx context.Context) OnepasswordItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnepasswordItemMapOutput)
}

func (i OnepasswordItemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*OnepasswordItem] {
	return pulumix.Output[map[string]*OnepasswordItem]{
		OutputState: i.ToOnepasswordItemMapOutputWithContext(ctx).OutputState,
	}
}

type OnepasswordItemOutput struct{ *pulumi.OutputState }

func (OnepasswordItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnepasswordItem)(nil)).Elem()
}

func (o OnepasswordItemOutput) ToOnepasswordItemOutput() OnepasswordItemOutput {
	return o
}

func (o OnepasswordItemOutput) ToOnepasswordItemOutputWithContext(ctx context.Context) OnepasswordItemOutput {
	return o
}

func (o OnepasswordItemOutput) ToOutput(ctx context.Context) pulumix.Output[*OnepasswordItem] {
	return pulumix.Output[*OnepasswordItem]{
		OutputState: o.OutputState,
	}
}

// The category of the item. One of ["login" "password" "database"]
func (o OnepasswordItemOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// (Only applies to the database category) The name of the database.
func (o OnepasswordItemOutput) Database() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Database }).(pulumi.StringPtrOutput)
}

// (Only applies to the database category) The address where the database can be found
func (o OnepasswordItemOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Password for this item.
func (o OnepasswordItemOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Password for this item.
func (o OnepasswordItemOutput) PasswordRecipe() OnepasswordItemPasswordRecipePtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) OnepasswordItemPasswordRecipePtrOutput { return v.PasswordRecipe }).(OnepasswordItemPasswordRecipePtrOutput)
}

// (Only applies to the database category) The port the database is listening on.
func (o OnepasswordItemOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Port }).(pulumi.StringPtrOutput)
}

// A list of custom sections in an item
func (o OnepasswordItemOutput) Sections() OnepasswordItemSectionArrayOutput {
	return o.ApplyT(func(v *OnepasswordItem) OnepasswordItemSectionArrayOutput { return v.Sections }).(OnepasswordItemSectionArrayOutput)
}

// An array of strings of the tags assigned to the item.
func (o OnepasswordItemOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The title of the item.
func (o OnepasswordItemOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

// The type of value stored in the field. One of ["STRING" "EMAIL" "CONCEALED" "URL" "OTP" "DATE" "MONTH_YEAR" "MENU"]
func (o OnepasswordItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The primary URL for the item.
func (o OnepasswordItemOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// Username for this item.
func (o OnepasswordItemOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// The UUID of the item. Item identifiers are unique within a specific vault.
func (o OnepasswordItemOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

// The UUID of the vault the item is in.
func (o OnepasswordItemOutput) Vault() pulumi.StringOutput {
	return o.ApplyT(func(v *OnepasswordItem) pulumi.StringOutput { return v.Vault }).(pulumi.StringOutput)
}

type OnepasswordItemArrayOutput struct{ *pulumi.OutputState }

func (OnepasswordItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnepasswordItem)(nil)).Elem()
}

func (o OnepasswordItemArrayOutput) ToOnepasswordItemArrayOutput() OnepasswordItemArrayOutput {
	return o
}

func (o OnepasswordItemArrayOutput) ToOnepasswordItemArrayOutputWithContext(ctx context.Context) OnepasswordItemArrayOutput {
	return o
}

func (o OnepasswordItemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*OnepasswordItem] {
	return pulumix.Output[[]*OnepasswordItem]{
		OutputState: o.OutputState,
	}
}

func (o OnepasswordItemArrayOutput) Index(i pulumi.IntInput) OnepasswordItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OnepasswordItem {
		return vs[0].([]*OnepasswordItem)[vs[1].(int)]
	}).(OnepasswordItemOutput)
}

type OnepasswordItemMapOutput struct{ *pulumi.OutputState }

func (OnepasswordItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnepasswordItem)(nil)).Elem()
}

func (o OnepasswordItemMapOutput) ToOnepasswordItemMapOutput() OnepasswordItemMapOutput {
	return o
}

func (o OnepasswordItemMapOutput) ToOnepasswordItemMapOutputWithContext(ctx context.Context) OnepasswordItemMapOutput {
	return o
}

func (o OnepasswordItemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*OnepasswordItem] {
	return pulumix.Output[map[string]*OnepasswordItem]{
		OutputState: o.OutputState,
	}
}

func (o OnepasswordItemMapOutput) MapIndex(k pulumi.StringInput) OnepasswordItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OnepasswordItem {
		return vs[0].(map[string]*OnepasswordItem)[vs[1].(string)]
	}).(OnepasswordItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OnepasswordItemInput)(nil)).Elem(), &OnepasswordItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnepasswordItemArrayInput)(nil)).Elem(), OnepasswordItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnepasswordItemMapInput)(nil)).Elem(), OnepasswordItemMap{})
	pulumi.RegisterOutputType(OnepasswordItemOutput{})
	pulumi.RegisterOutputType(OnepasswordItemArrayOutput{})
	pulumi.RegisterOutputType(OnepasswordItemMapOutput{})
}
